// <auto-generated />
using System;
using BPNew.Service.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BPNew.Service.Data.Migrations
{
    [DbContext(typeof(AppDbMigrationContext))]
    [Migration("20180813070328_AddInfo7KeyWords")]
    partial class AddInfo7KeyWords
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BPNew.Service.Models.Accesses", b =>
                {
                    b.Property<int>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomUserId");

                    b.Property<int?>("IpadDisplayOrder");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RefId");

                    b.Property<Guid>("RoleId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Type");

                    b.HasKey("AccessId");

                    b.HasIndex("CustomUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accesses");
                });

            modelBuilder.Entity("BPNew.Service.Models.AgendaDetails", b =>
                {
                    b.Property<int>("PaperId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("EndTime");

                    b.Property<bool>("IsCompleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PresenterEmail")
                        .HasMaxLength(100);

                    b.Property<string>("PresenterName")
                        .HasMaxLength(100);

                    b.Property<TimeSpan?>("StartTime");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PaperId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("AgendaDetails");
                });

            modelBuilder.Entity("BPNew.Service.Models.AgendaTemplates", b =>
                {
                    b.Property<int>("AgendaTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath");

                    b.Property<bool>("IsAssigned");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("RefId");

                    b.Property<byte>("RefType");

                    b.HasKey("AgendaTemplateId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("AgendaTemplates");
                });

            modelBuilder.Entity("BPNew.Service.Models.AlternativeFlows", b =>
                {
                    b.Property<int>("FlowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CreateNewVersion");

                    b.Property<int>("CurrentFlow");

                    b.Property<int?>("CurrentOrder");

                    b.Property<string>("FlowName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("NextFlow");

                    b.Property<int?>("NextOrder");

                    b.HasKey("FlowId");

                    b.HasIndex("CurrentFlow");

                    b.HasIndex("NextFlow");

                    b.ToTable("AlternativeFlows","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.AnnotationAccesses", b =>
                {
                    b.Property<int>("AnnotationShareId");

                    b.Property<int>("CustomUserId");

                    b.Property<bool>("IsDownloaded");

                    b.HasKey("AnnotationShareId", "CustomUserId");

                    b.HasIndex("CustomUserId");

                    b.ToTable("AnnotationAccesses");
                });

            modelBuilder.Entity("BPNew.Service.Models.AnnotationShares", b =>
                {
                    b.Property<int>("AnnotationShareId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomUserId");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("IPadUniqueId")
                        .HasColumnName("iPadUniqueID")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<bool>("IsBackup");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaperId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("VersionId");

                    b.HasKey("AnnotationShareId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomUserId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PaperId");

                    b.HasIndex("VersionId");

                    b.ToTable("AnnotationShares");
                });

            modelBuilder.Entity("BPNew.Service.Models.ArchivedAuditLogs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("EventNumber");

                    b.Property<string>("EventStatus")
                        .HasMaxLength(50);

                    b.Property<string>("Parameters");

                    b.Property<string>("UserName")
                        .HasMaxLength(250);

                    b.HasKey("LogId");

                    b.ToTable("ArchivedAuditLogs");
                });

            modelBuilder.Entity("BPNew.Service.Models.ArchivedPbauditLogs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionBy");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentID");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(500);

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EventStatus")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("LogDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MeetingId")
                        .HasColumnName("MeetingID");

                    b.Property<string>("Parameter")
                        .HasMaxLength(500);

                    b.Property<int>("VersionId")
                        .HasColumnName("VersionID");

                    b.HasKey("LogId");

                    b.ToTable("ArchivedPBAuditLogs","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetApplications", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("LoweredApplicationName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("ApplicationId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ApplicationName")
                        .IsUnique()
                        .HasName("UQ__aspnet_A__309103310EA330E9");

                    b.HasIndex("LoweredApplicationName")
                        .HasName("aspnet_Applications_Index")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("aspnet_Applications");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetMembership", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<int>("FailedPasswordAnswerAttemptCount");

                    b.Property<DateTime>("FailedPasswordAnswerAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<int>("FailedPasswordAttemptCount");

                    b.Property<DateTime>("FailedPasswordAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsLockedOut");

                    b.Property<DateTime>("LastLockoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredEmail")
                        .HasMaxLength(256);

                    b.Property<string>("MobilePin")
                        .HasColumnName("MobilePIN")
                        .HasMaxLength(16);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordAnswer")
                        .HasMaxLength(128);

                    b.Property<int>("PasswordFormat");

                    b.Property<string>("PasswordQuestion")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ApplicationId", "LoweredEmail")
                        .HasName("aspnet_Membership_index")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("aspnet_Membership");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetPaths", b =>
                {
                    b.Property<Guid>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("LoweredPath")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("PathId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ApplicationId", "LoweredPath")
                        .IsUnique()
                        .HasName("aspnet_Paths_index")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("aspnet_Paths");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetPersonalizationAllUsers", b =>
                {
                    b.Property<Guid>("PathId");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PageSettings")
                        .IsRequired()
                        .HasColumnType("image");

                    b.HasKey("PathId");

                    b.ToTable("aspnet_PersonalizationAllUsers");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetPersonalizationPerUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PageSettings")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<Guid?>("PathId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PathId", "UserId")
                        .IsUnique()
                        .HasName("aspnet_PersonalizationPerUser_index1")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("UserId", "PathId")
                        .IsUnique()
                        .HasName("aspnet_PersonalizationPerUser_ncindex2")
                        .HasFilter("[UserId] IS NOT NULL AND [PathId] IS NOT NULL");

                    b.ToTable("aspnet_PersonalizationPerUser");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetProfile", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PropertyNames")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<byte[]>("PropertyValuesBinary")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("PropertyValuesString")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("UserId");

                    b.ToTable("aspnet_Profile");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetRoles1", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('ChangePassword_HTML,ChangePassword_XML')");

                    b.Property<string>("IpadActions");

                    b.Property<string>("LoweredRoleName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(250);

                    b.HasKey("RoleId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ApplicationId", "LoweredRoleName")
                        .IsUnique()
                        .HasName("aspnet_Roles_index1")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("aspnet_Roles");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetSchemaVersions", b =>
                {
                    b.Property<string>("Feature")
                        .HasMaxLength(128);

                    b.Property<string>("CompatibleSchemaVersion")
                        .HasMaxLength(128);

                    b.Property<bool>("IsCurrentVersion");

                    b.HasKey("Feature", "CompatibleSchemaVersion");

                    b.ToTable("aspnet_SchemaVersions");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetUsers1", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId");

                    b.Property<bool>("IsAnonymous");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("MobileAlias")
                        .HasMaxLength(16);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ApplicationId", "LastActivityDate")
                        .HasName("aspnet_Users_Index2");

                    b.HasIndex("ApplicationId", "LoweredUserName")
                        .IsUnique()
                        .HasName("aspnet_Users_Index")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("aspnet_Users");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetUsersInRoles", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasName("aspnet_UsersInRoles_index");

                    b.ToTable("aspnet_UsersInRoles");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetWebEventEvents", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ApplicationPath")
                        .HasMaxLength(256);

                    b.Property<string>("ApplicationVirtualPath")
                        .HasMaxLength(256);

                    b.Property<string>("Details")
                        .HasColumnType("ntext");

                    b.Property<int>("EventCode");

                    b.Property<int>("EventDetailCode");

                    b.Property<decimal>("EventOccurrence")
                        .HasColumnType("decimal(19, 0)");

                    b.Property<decimal>("EventSequence")
                        .HasColumnType("decimal(19, 0)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EventTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ExceptionType")
                        .HasMaxLength(256);

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Message")
                        .HasMaxLength(1024);

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(1024);

                    b.HasKey("EventId");

                    b.ToTable("aspnet_WebEvent_Events");
                });

            modelBuilder.Entity("BPNew.Service.Models.AuditLogs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("EventNumber");

                    b.Property<string>("EventStatus")
                        .HasMaxLength(50);

                    b.Property<string>("Parameters");

                    b.Property<string>("UserName")
                        .HasMaxLength(250);

                    b.HasKey("LogId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("BPNew.Service.Models.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryOrder");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Description2")
                        .HasMaxLength(1000);

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ShortName")
                        .HasMaxLength(50);

                    b.Property<byte>("Status");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BPNew.Service.Models.CommentAccesses", b =>
                {
                    b.Property<int>("CommentId");

                    b.Property<int>("CustomUserId");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<bool>("IsViewed")
                        .HasColumnName("isViewed");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("CommentId", "CustomUserId");

                    b.HasIndex("CustomUserId");

                    b.ToTable("CommentAccesses");
                });

            modelBuilder.Entity("BPNew.Service.Models.Comments", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IPadUniqueId")
                        .HasColumnName("iPadUniqueID")
                        .HasMaxLength(100);

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RefId");

                    b.Property<byte>("RefType");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("CommentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BPNew.Service.Models.Devices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100);

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<byte>("IsAllocatedForDs")
                        .HasColumnName("IsAllocatedForDS");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(100);

                    b.Property<byte?>("Status");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("BPNew.Service.Models.DigitalSignatureLogs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomUserId");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Parameters");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("LogId");

                    b.ToTable("DigitalSignatureLogs");
                });

            modelBuilder.Entity("BPNew.Service.Models.DocFlowNonStakeHolders", b =>
                {
                    b.Property<int>("DocFlowNonStakeHolderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DocFlowStakeHolderId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedByDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NonStakeHolderId");

                    b.Property<string>("Response");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StakeHolderRequest");

                    b.Property<byte>("Status");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("DocFlowNonStakeHolderId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DocFlowStakeHolderId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("NonStakeHolderId");

                    b.ToTable("DocFlowNonStakeHolders","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.DocFlowShcomments", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DocFlowStakeHolderId");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<bool>("IsCommentPublish");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("CommentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DocFlowStakeHolderId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("DocFlowSHComments","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.DocFlowStakeHolders", b =>
                {
                    b.Property<int>("DocFlowStakeHolderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<bool>("IsRead");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShflowId")
                        .HasColumnName("SHFlowId");

                    b.Property<int>("ShflowPath")
                        .HasColumnName("SHFlowPath");

                    b.Property<int>("Shorder")
                        .HasColumnName("SHOrder");

                    b.Property<int>("StakeHolderId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<byte>("UserDocStatus");

                    b.Property<int>("VersionId");

                    b.HasKey("DocFlowStakeHolderId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ShflowId");

                    b.HasIndex("StakeHolderId");

                    b.HasIndex("VersionId");

                    b.ToTable("DocFlowStakeHolders","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.Documents", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("DocumentFrom")
                        .HasMaxLength(250);

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("DocumentRefNo")
                        .HasMaxLength(50);

                    b.Property<string>("DocumentSubject")
                        .HasMaxLength(250);

                    b.Property<string>("DocumentTo")
                        .HasMaxLength(250);

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Keywords")
                        .HasMaxLength(500);

                    b.Property<int>("MeetingId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentDocId");

                    b.Property<byte>("PbdocType")
                        .HasColumnName("PBDocType");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("WorkflowId");

                    b.Property<byte>("WorkflowType");

                    b.HasKey("DocumentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MeetingId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Documents","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.DocumentStatuses", b =>
                {
                    b.Property<byte>("DocumentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PendingAction")
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("DocumentStatusId");

                    b.ToTable("DocumentStatuses","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.DocVersions", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .IsUnicode(false);

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PreviousVersionId");

                    b.HasKey("VersionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PreviousVersionId");

                    b.ToTable("DocVersions");
                });

            modelBuilder.Entity("BPNew.Service.Models.FileStructures", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentID")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<byte[]>("Content");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DsrefId")
                        .HasColumnName("DSRefId")
                        .HasMaxLength(500);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RefId")
                        .HasColumnName("RefID");

                    b.Property<int>("RefType");

                    b.HasKey("DocumentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedDate");

                    b.ToTable("FileStructures");
                });

            modelBuilder.Entity("BPNew.Service.Models.HeadingAccesses", b =>
                {
                    b.Property<int>("HeadingId");

                    b.Property<int>("CustomUserId");

                    b.Property<byte>("IsAllowed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.HasKey("HeadingId", "CustomUserId");

                    b.HasIndex("CustomUserId")
                        .HasName("IX_Table_CustomUserId");

                    b.ToTable("HeadingAccesses");
                });

            modelBuilder.Entity("BPNew.Service.Models.Headings", b =>
                {
                    b.Property<int>("HeadingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgendaOrder");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<byte>("IsRestricted");

                    b.Property<int>("MeetingId");

                    b.Property<int?>("PreviousHeadingId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("HeadingId");

                    b.HasIndex("MeetingId");

                    b.HasIndex("PreviousHeadingId");

                    b.ToTable("Headings");
                });

            modelBuilder.Entity("BPNew.Service.Models.IPadDbs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Script")
                        .HasColumnType("ntext");

                    b.Property<int>("ScriptOrder");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("iPadDBs");
                });

            modelBuilder.Entity("BPNew.Service.Models.Keywords", b =>
                {
                    b.Property<int>("KeywordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<string>("Info4");

                    b.Property<string>("Info5");

                    b.Property<string>("Info6");

                    b.Property<string>("Info7");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("KeywordId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("BPNew.Service.Models.MeetingPresences", b =>
                {
                    b.Property<int>("MeetingId");

                    b.Property<int>("CustomUserId");

                    b.Property<string>("AttendenceReason")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<byte>("IsAttending");

                    b.Property<byte>("IsPresent");

                    b.Property<string>("MeetingNote");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("MeetingId", "CustomUserId");

                    b.HasIndex("CustomUserId");

                    b.ToTable("MeetingPresences");
                });

            modelBuilder.Entity("BPNew.Service.Models.Meetings", b =>
                {
                    b.Property<int>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Description2")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("DocumentsDeadline")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("EndTime");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsTentative");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("MeetingNote");

                    b.Property<byte>("MeetingType");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrganizerId");

                    b.Property<TimeSpan?>("StartTime");

                    b.Property<byte>("Status");

                    b.Property<int>("SubCategoryId");

                    b.Property<string>("Subject")
                        .HasMaxLength(256);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Venue")
                        .HasMaxLength(255);

                    b.HasKey("MeetingId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("BPNew.Service.Models.MeetingTemplates", b =>
                {
                    b.Property<int>("MeetingTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("Status");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Venue")
                        .HasMaxLength(255);

                    b.HasKey("MeetingTemplateId");

                    b.ToTable("MeetingTemplates");
                });

            modelBuilder.Entity("BPNew.Service.Models.PaperDecisionViews", b =>
                {
                    b.Property<int>("PaperId");

                    b.Property<int>("CustomUserId");

                    b.Property<string>("ApprovalComment")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("DecisionStatus");

                    b.Property<DateTime?>("DsapprovalDate")
                        .HasColumnName("DSApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("DsapprovalStatus")
                        .HasColumnName("DSApprovalStatus");

                    b.Property<string>("DsprivateComment")
                        .HasColumnName("DSPrivateComment")
                        .IsUnicode(false);

                    b.Property<string>("DspublicComment")
                        .HasColumnName("DSPublicComment")
                        .IsUnicode(false);

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<byte>("IsAllowDigitalSign");

                    b.Property<byte>("IsAllowed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte>("NotificationStatus");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("ViewedDate")
                        .HasColumnType("datetime");

                    b.HasKey("PaperId", "CustomUserId");

                    b.HasIndex("CustomUserId");

                    b.HasIndex("PaperId", "CustomUserId", "DecisionStatus", "NotificationStatus", "ApprovalComment", "TimeStamp", "IsAllowed")
                        .HasName("IX_PaperDecisionViews_CI");

                    b.ToTable("PaperDecisionViews");
                });

            modelBuilder.Entity("BPNew.Service.Models.PaperKeywordTags", b =>
                {
                    b.Property<int>("PaperId");

                    b.Property<int>("KeywordId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PaperId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("PaperKeywordTags");
                });

            modelBuilder.Entity("BPNew.Service.Models.Papers", b =>
                {
                    b.Property<int>("PaperId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdditionalRefId");

                    b.Property<int>("AgendaOrder");

                    b.Property<string>("CarryFwdinfo")
                        .HasColumnName("CarryFWDinfo")
                        .HasMaxLength(255);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<byte>("DocType");

                    b.Property<int?>("HeadingId");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<bool>("IsCarryFwdfromLastMeeting")
                        .HasColumnName("IsCarryFWDfromLastMeeting");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte>("IsDigitallySignable");

                    b.Property<bool>("IsPwdProtected");

                    b.Property<byte>("IsRestricted");

                    b.Property<string>("Keyword");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("PaperColor")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PaperRefNo")
                        .HasMaxLength(50);

                    b.Property<byte?>("PaperStatus");

                    b.Property<byte?>("ScrollDirection");

                    b.Property<string>("StatusComment")
                        .HasMaxLength(500);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("VersionId");

                    b.Property<byte>("VersionInfo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((214))");

                    b.HasKey("PaperId");

                    b.HasIndex("HeadingId");

                    b.HasIndex("VersionId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("BPNew.Service.Models.PasswordHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("HistoryId");

                    b.ToTable("PasswordHistory");
                });

            modelBuilder.Entity("BPNew.Service.Models.PbauditLogs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionBy");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentID");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(500);

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EventStatus")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("LogDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MeetingId")
                        .HasColumnName("MeetingID");

                    b.Property<string>("Parameter")
                        .HasMaxLength(500);

                    b.Property<int>("VersionId")
                        .HasColumnName("VersionID");

                    b.HasKey("LogId");

                    b.ToTable("PBAuditLogs","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.PbdocVersions", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("DocStatus");

                    b.Property<int>("DocumentId");

                    b.Property<byte[]>("FinalizedDoc");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("VersionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DocStatus");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("PBDocVersions","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.ProductSettings", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Info1")
                        .HasMaxLength(300);

                    b.Property<string>("Info2")
                        .HasMaxLength(300);

                    b.Property<bool?>("IsIpad")
                        .HasColumnName("IsIPAD");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value")
                        .HasMaxLength(2048)
                        .IsUnicode(false);

                    b.HasKey("SettingId");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasName("UNQ_Key_ProductSettings");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ProductSettings");
                });

            modelBuilder.Entity("BPNew.Service.Models.Salutations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsOn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Salutation")
                        .IsUnique()
                        .HasName("UQ__Salutati__ED1ECA726CA31EA0");

                    b.ToTable("Salutations");
                });

            modelBuilder.Entity("BPNew.Service.Models.Spdocs", b =>
                {
                    b.Property<int>("SpdocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SPDocId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocName")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<Guid?>("FileStructureId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MovedToBp")
                        .HasColumnName("MovedToBP")
                        .HasMaxLength(500);

                    b.Property<int>("SubCategoryId");

                    b.Property<byte?>("VersionInfo");

                    b.HasKey("SpdocId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("SPDocs");
                });

            modelBuilder.Entity("BPNew.Service.Models.StakeHolderFlows", b =>
                {
                    b.Property<int>("ShflowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SHFlowId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowMultipleUsers");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Permissions")
                        .HasMaxLength(200);

                    b.Property<int?>("PrevFlowId");

                    b.Property<int?>("RefFlowId");

                    b.Property<string>("ShflowName")
                        .HasColumnName("SHFlowName")
                        .HasMaxLength(100);

                    b.Property<bool>("ShowInView");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ShflowId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PrevFlowId");

                    b.ToTable("StakeHolderFlows","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.SubCategories", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<bool?>("IsCustomSequence")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ShortName")
                        .HasMaxLength(50);

                    b.Property<byte>("Status");

                    b.Property<int>("SubCategoryOrder");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("BPNew.Service.Models.TrackingEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityName")
                        .HasMaxLength(2048);

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("RecordNumber");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.Property<byte?>("TraceLevelId");

                    b.Property<string>("TrackingData");

                    b.Property<Guid>("WorkflowInstanceId");

                    b.HasKey("Id");

                    b.ToTable("TrackingEvents","PreBoard");
                });

            modelBuilder.Entity("BPNew.Service.Models.UserDetails", b =>
                {
                    b.Property<int>("CustomUserId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PastDataAllowedFor");

                    b.Property<DateTime?>("PastDataAllowedFrom")
                        .HasColumnType("date");

                    b.Property<string>("Pin")
                        .HasColumnName("PIN")
                        .HasMaxLength(512);

                    b.Property<string>("Pinsalt")
                        .HasColumnName("PINSalt")
                        .HasMaxLength(512);

                    b.Property<string>("RefId")
                        .HasMaxLength(3000);

                    b.HasKey("CustomUserId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("BPNew.Service.Models.UserDevices", b =>
                {
                    b.Property<int>("CustomUserId");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("Dsstatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DSStatus")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("CustomUserId", "DeviceId");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("BPNew.Service.Models.UserDsdetails", b =>
                {
                    b.Property<int>("CustomUserId");

                    b.Property<DateTime?>("CertificateExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("CertificateStatus");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("IdType");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("IdentityStatusComment")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SecretWord")
                        .HasMaxLength(255);

                    b.HasKey("CustomUserId");

                    b.ToTable("UserDSDetails");
                });

            modelBuilder.Entity("BPNew.Service.Models.Users", b =>
                {
                    b.Property<int>("CustomUserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoardEmail")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(500);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(150);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<byte>("DigitalSignStatus");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50);

                    b.Property<string>("Facebook")
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<byte[]>("Image");

                    b.Property<DateTime?>("ImageModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Info1")
                        .HasMaxLength(500);

                    b.Property<string>("Info2")
                        .HasMaxLength(250);

                    b.Property<int?>("Info3");

                    b.Property<bool>("IsDisclaimerViewed");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastActivatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(250);

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OfficeEmail")
                        .HasMaxLength(100);

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(15);

                    b.Property<bool>("PasswordReseted");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Signature");

                    b.Property<string>("SkypeId")
                        .HasMaxLength(100);

                    b.Property<byte>("Status");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<Guid>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<byte?>("ViewType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((255))");

                    b.HasKey("CustomUserId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BPNew.Service.Models.Accesses", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CustomUser")
                        .WithMany("Accesses")
                        .HasForeignKey("CustomUserId")
                        .HasConstraintName("FK_Accesses_Users");

                    b.HasOne("BPNew.Service.Models.AspnetRoles1", "Role")
                        .WithMany("Accesses")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Accesses_aspnet_Roles");
                });

            modelBuilder.Entity("BPNew.Service.Models.AgendaDetails", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("AgendaDetailsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_AgendaDetails_Users");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("AgendaDetailsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_AgendaDetails_Users1");

                    b.HasOne("BPNew.Service.Models.Papers", "Paper")
                        .WithOne("AgendaDetails")
                        .HasForeignKey("BPNew.Service.Models.AgendaDetails", "PaperId")
                        .HasConstraintName("FK_AgendaDetails_Papers");
                });

            modelBuilder.Entity("BPNew.Service.Models.AgendaTemplates", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("AgendaTemplatesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_AgendaTemplates_Users");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("AgendaTemplatesModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_AgendaTemplates_Users1");
                });

            modelBuilder.Entity("BPNew.Service.Models.AlternativeFlows", b =>
                {
                    b.HasOne("BPNew.Service.Models.StakeHolderFlows", "CurrentFlowNavigation")
                        .WithMany("AlternativeFlowsCurrentFlowNavigation")
                        .HasForeignKey("CurrentFlow")
                        .HasConstraintName("FK_AlternativeFlows_StakeHolderFlows");

                    b.HasOne("BPNew.Service.Models.StakeHolderFlows", "NextFlowNavigation")
                        .WithMany("AlternativeFlowsNextFlowNavigation")
                        .HasForeignKey("NextFlow")
                        .HasConstraintName("FK_AlternativeFlows_StakeHolderFlows1");
                });

            modelBuilder.Entity("BPNew.Service.Models.AnnotationAccesses", b =>
                {
                    b.HasOne("BPNew.Service.Models.AnnotationShares", "AnnotationShare")
                        .WithMany("AnnotationAccesses")
                        .HasForeignKey("AnnotationShareId")
                        .HasConstraintName("FK_AnnotationAccesses_AnnotationShares");

                    b.HasOne("BPNew.Service.Models.Users", "CustomUser")
                        .WithMany("AnnotationAccesses")
                        .HasForeignKey("CustomUserId")
                        .HasConstraintName("FK_AnnotationAccesses_Users");
                });

            modelBuilder.Entity("BPNew.Service.Models.AnnotationShares", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("AnnotationSharesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_AnnotationShares_Users1");

                    b.HasOne("BPNew.Service.Models.Users", "CustomUser")
                        .WithMany("AnnotationSharesCustomUser")
                        .HasForeignKey("CustomUserId")
                        .HasConstraintName("FK_AnnotationShares_Users");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("AnnotationSharesModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_AnnotationShares_Users2");

                    b.HasOne("BPNew.Service.Models.Papers", "Paper")
                        .WithMany("AnnotationShares")
                        .HasForeignKey("PaperId")
                        .HasConstraintName("FK_AnnotationShares_Papers");

                    b.HasOne("BPNew.Service.Models.DocVersions", "Version")
                        .WithMany("AnnotationShares")
                        .HasForeignKey("VersionId")
                        .HasConstraintName("FK_AnnotationShares_DocVersions");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetMembership", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspnetApplications", "Application")
                        .WithMany("AspnetMembership")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK__aspnet_Me__Appli__11158940");

                    b.HasOne("BPNew.Service.Models.AspnetUsers1", "User")
                        .WithOne("AspnetMembership")
                        .HasForeignKey("BPNew.Service.Models.AspnetMembership", "UserId")
                        .HasConstraintName("FK__aspnet_Me__UserI__1209AD79");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetPaths", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspnetApplications", "Application")
                        .WithMany("AspnetPaths")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK__aspnet_Pa__Appli__0880433F");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetPersonalizationAllUsers", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspnetPaths", "Path")
                        .WithOne("AspnetPersonalizationAllUsers")
                        .HasForeignKey("BPNew.Service.Models.AspnetPersonalizationAllUsers", "PathId")
                        .HasConstraintName("FK__aspnet_Pe__PathI__0E391C95");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetPersonalizationPerUser", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspnetPaths", "Path")
                        .WithMany("AspnetPersonalizationPerUser")
                        .HasForeignKey("PathId")
                        .HasConstraintName("FK__aspnet_Pe__PathI__0F2D40CE");

                    b.HasOne("BPNew.Service.Models.AspnetUsers1", "User")
                        .WithMany("AspnetPersonalizationPerUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__aspnet_Pe__UserI__10216507");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetProfile", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspnetUsers1", "User")
                        .WithOne("AspnetProfile")
                        .HasForeignKey("BPNew.Service.Models.AspnetProfile", "UserId")
                        .HasConstraintName("FK__aspnet_Pr__UserI__0D44F85C");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetRoles1", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspnetApplications", "Application")
                        .WithMany("AspnetRoles1")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK__aspnet_Ro__Appli__440B1D61");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BPNew.Service.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetUsers1", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspnetApplications", "Application")
                        .WithMany("AspnetUsers1")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK__aspnet_Us__Appli__09746778");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspnetUsersInRoles", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspnetRoles1", "Role")
                        .WithMany("AspnetUsersInRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__aspnet_Us__RoleI__4AB81AF0");

                    b.HasOne("BPNew.Service.Models.AspnetUsers1", "User")
                        .WithMany("AspnetUsersInRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__aspnet_Us__UserI__0C50D423");
                });

            modelBuilder.Entity("BPNew.Service.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("BPNew.Service.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPNew.Service.Models.CommentAccesses", b =>
                {
                    b.HasOne("BPNew.Service.Models.Comments", "Comment")
                        .WithMany("CommentAccesses")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_CommentViews_Comments");

                    b.HasOne("BPNew.Service.Models.Users", "CustomUser")
                        .WithMany("CommentAccesses")
                        .HasForeignKey("CustomUserId")
                        .HasConstraintName("FK_CommentViews_Users");
                });

            modelBuilder.Entity("BPNew.Service.Models.Comments", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("CommentsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Comments_Users_AddBy");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("CommentsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Comments_Users_ModBy");
                });

            modelBuilder.Entity("BPNew.Service.Models.DocFlowNonStakeHolders", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("DocFlowNonStakeHoldersCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_DocFlowNonStakeHolders_Users");

                    b.HasOne("BPNew.Service.Models.DocFlowStakeHolders", "DocFlowStakeHolder")
                        .WithMany("DocFlowNonStakeHolders")
                        .HasForeignKey("DocFlowStakeHolderId")
                        .HasConstraintName("FK_DocFlowNonStakeHolders_DocFlowNonStakeHolders");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("DocFlowNonStakeHoldersModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_DocFlowNonStakeHolders_Users1");

                    b.HasOne("BPNew.Service.Models.Users", "NonStakeHolder")
                        .WithMany("DocFlowNonStakeHoldersNonStakeHolder")
                        .HasForeignKey("NonStakeHolderId")
                        .HasConstraintName("FK_DocFlowNonStakeHolders_Users2");
                });

            modelBuilder.Entity("BPNew.Service.Models.DocFlowShcomments", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("DocFlowShcommentsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_DocFlowSHComments_Users");

                    b.HasOne("BPNew.Service.Models.DocFlowStakeHolders", "DocFlowStakeHolder")
                        .WithMany("DocFlowShcomments")
                        .HasForeignKey("DocFlowStakeHolderId")
                        .HasConstraintName("FK_DocFlowSHComments_DocFlowStakeHolders");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("DocFlowShcommentsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_DocFlowSHComments_Users1");
                });

            modelBuilder.Entity("BPNew.Service.Models.DocFlowStakeHolders", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("DocFlowStakeHoldersCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_DocFlowStakeHolders_Users1");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("DocFlowStakeHoldersModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_DocFlowStakeHolders_Users2");

                    b.HasOne("BPNew.Service.Models.StakeHolderFlows", "Shflow")
                        .WithMany("DocFlowStakeHolders")
                        .HasForeignKey("ShflowId")
                        .HasConstraintName("FK_DocFlowStakeHolders_StakeHolderFlows");

                    b.HasOne("BPNew.Service.Models.Users", "StakeHolder")
                        .WithMany("DocFlowStakeHoldersStakeHolder")
                        .HasForeignKey("StakeHolderId")
                        .HasConstraintName("FK_DocFlowStakeHolders_Users");

                    b.HasOne("BPNew.Service.Models.PbdocVersions", "Version")
                        .WithMany("DocFlowStakeHolders")
                        .HasForeignKey("VersionId")
                        .HasConstraintName("FK_DocFlowStakeHolders_PBDocVersions");
                });

            modelBuilder.Entity("BPNew.Service.Models.Documents", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("DocumentsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Documents_Users");

                    b.HasOne("BPNew.Service.Models.Meetings", "Meeting")
                        .WithMany("Documents")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_Documents_Meetings");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("DocumentsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Documents_Users1");
                });

            modelBuilder.Entity("BPNew.Service.Models.DocVersions", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("DocVersionsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_DocVersions_Users_AddBy");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("DocVersionsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_DocVersions_Users_ModBy");

                    b.HasOne("BPNew.Service.Models.DocVersions", "PreviousVersion")
                        .WithMany("InversePreviousVersion")
                        .HasForeignKey("PreviousVersionId")
                        .HasConstraintName("FK_DocVersions_DocVersions");
                });

            modelBuilder.Entity("BPNew.Service.Models.HeadingAccesses", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CustomUser")
                        .WithMany("HeadingAccesses")
                        .HasForeignKey("CustomUserId")
                        .HasConstraintName("FK_HeadingAccesses_Users");

                    b.HasOne("BPNew.Service.Models.Headings", "Heading")
                        .WithMany("HeadingAccesses")
                        .HasForeignKey("HeadingId")
                        .HasConstraintName("FK_HeadingAccesses_Headings");
                });

            modelBuilder.Entity("BPNew.Service.Models.Headings", b =>
                {
                    b.HasOne("BPNew.Service.Models.Meetings", "Meeting")
                        .WithMany("Headings")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_Headings_Meetings");

                    b.HasOne("BPNew.Service.Models.Headings", "PreviousHeading")
                        .WithMany("InversePreviousHeading")
                        .HasForeignKey("PreviousHeadingId")
                        .HasConstraintName("FK_Headings_PreviousHeadings");
                });

            modelBuilder.Entity("BPNew.Service.Models.MeetingPresences", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CustomUser")
                        .WithMany("MeetingPresences")
                        .HasForeignKey("CustomUserId")
                        .HasConstraintName("FK_MeetingPresences_Users");

                    b.HasOne("BPNew.Service.Models.Meetings", "Meeting")
                        .WithMany("MeetingPresences")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_MeetingPresences_Meetings");
                });

            modelBuilder.Entity("BPNew.Service.Models.Meetings", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("MeetingsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Meetings_Users_AddBy");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("MeetingsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Meetings_Users_ModBy");

                    b.HasOne("BPNew.Service.Models.Users", "Organizer")
                        .WithMany("MeetingsOrganizer")
                        .HasForeignKey("OrganizerId")
                        .HasConstraintName("FK_Meetings_Users");

                    b.HasOne("BPNew.Service.Models.SubCategories", "SubCategory")
                        .WithMany("Meetings")
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("FK_Meetings_SubCategories");
                });

            modelBuilder.Entity("BPNew.Service.Models.PaperDecisionViews", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CustomUser")
                        .WithMany("PaperDecisionViews")
                        .HasForeignKey("CustomUserId")
                        .HasConstraintName("FK_PaperDecisionViews_Users");

                    b.HasOne("BPNew.Service.Models.Papers", "Paper")
                        .WithMany("PaperDecisionViews")
                        .HasForeignKey("PaperId")
                        .HasConstraintName("FK_PaperDecisionViews_Papers");
                });

            modelBuilder.Entity("BPNew.Service.Models.PaperKeywordTags", b =>
                {
                    b.HasOne("BPNew.Service.Models.Keywords", "Keyword")
                        .WithMany("PaperKeywordTags")
                        .HasForeignKey("KeywordId")
                        .HasConstraintName("FK_PaperKeywordTags_Keywords");

                    b.HasOne("BPNew.Service.Models.Papers", "Paper")
                        .WithMany("PaperKeywordTags")
                        .HasForeignKey("PaperId")
                        .HasConstraintName("FK_PaperKeywordTags_Papers");
                });

            modelBuilder.Entity("BPNew.Service.Models.Papers", b =>
                {
                    b.HasOne("BPNew.Service.Models.Headings", "Heading")
                        .WithMany("Papers")
                        .HasForeignKey("HeadingId")
                        .HasConstraintName("FK_Papers_Headings");

                    b.HasOne("BPNew.Service.Models.DocVersions", "Version")
                        .WithMany("Papers")
                        .HasForeignKey("VersionId")
                        .HasConstraintName("FK_Papers_DocVersions");
                });

            modelBuilder.Entity("BPNew.Service.Models.PbdocVersions", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("PbdocVersionsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_PBDocVersions_Users");

                    b.HasOne("BPNew.Service.Models.DocumentStatuses", "DocStatusNavigation")
                        .WithMany("PbdocVersions")
                        .HasForeignKey("DocStatus")
                        .HasConstraintName("FK_PBDocVersions_DocumentStatuses");

                    b.HasOne("BPNew.Service.Models.Documents", "Document")
                        .WithMany("PbdocVersions")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_PBDocVersions_Documents");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("PbdocVersionsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_PBDocVersions_Users1");
                });

            modelBuilder.Entity("BPNew.Service.Models.ProductSettings", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("ProductSettings")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_ProductSettings_Users");
                });

            modelBuilder.Entity("BPNew.Service.Models.Spdocs", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("SpdocsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_SPDocs_Users1");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("SpdocsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_SPDocs_Users");

                    b.HasOne("BPNew.Service.Models.SubCategories", "SubCategory")
                        .WithMany("Spdocs")
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("FK_SPDocs_SubCategories");
                });

            modelBuilder.Entity("BPNew.Service.Models.StakeHolderFlows", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("StakeHolderFlowsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_StakeHolderFlows_Users");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("StakeHolderFlowsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_StakeHolderFlows_Users1");

                    b.HasOne("BPNew.Service.Models.StakeHolderFlows", "PrevFlow")
                        .WithMany("InversePrevFlow")
                        .HasForeignKey("PrevFlowId")
                        .HasConstraintName("FK_StakeHolderFlows_StakeHolderFlows");

                    b.HasOne("BPNew.Service.Models.StakeHolderFlows", "Shflow")
                        .WithOne("InverseShflow")
                        .HasForeignKey("BPNew.Service.Models.StakeHolderFlows", "ShflowId")
                        .HasConstraintName("FK_StakeHolderFlows_StakeHolderFlows1");
                });

            modelBuilder.Entity("BPNew.Service.Models.SubCategories", b =>
                {
                    b.HasOne("BPNew.Service.Models.Categories", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_SubCategories_Categories");
                });

            modelBuilder.Entity("BPNew.Service.Models.UserDetails", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("UserDetailsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_UserDetails_Users");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("UserDetailsModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_UserDetails_Users1");
                });

            modelBuilder.Entity("BPNew.Service.Models.UserDevices", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CustomUser")
                        .WithMany("UserDevices")
                        .HasForeignKey("CustomUserId")
                        .HasConstraintName("FK_UserDevices_Users");
                });

            modelBuilder.Entity("BPNew.Service.Models.UserDsdetails", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CustomUser")
                        .WithOne("UserDsdetails")
                        .HasForeignKey("BPNew.Service.Models.UserDsdetails", "CustomUserId")
                        .HasConstraintName("FK_UserDSDetails_Users");
                });

            modelBuilder.Entity("BPNew.Service.Models.Users", b =>
                {
                    b.HasOne("BPNew.Service.Models.Users", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Users_Users_AddedBy");

                    b.HasOne("BPNew.Service.Models.Users", "ModifiedByNavigation")
                        .WithMany("InverseModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Users_Users_ModBy");

                    b.HasOne("BPNew.Service.Models.AspnetUsers1", "User")
                        .WithMany("Users")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_aspnet_Users");
                });
#pragma warning restore 612, 618
        }
    }
}
